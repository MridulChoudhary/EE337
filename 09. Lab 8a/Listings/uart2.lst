C51 COMPILER V9.60.7.0   UART2                                                             03/18/2025 15:44:47 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE UART2
OBJECT MODULE PLACED IN .\Objects\uart2.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Lab_8A required files\Lab_8A required files\uart2.c OPTIMIZE(8,SPEED) BR
                    -OWSE DEBUG OBJECTEXTEND PRINT(.\Listings\uart2.lst) TABS(2) OBJECT(.\Objects\uart2.obj)

line level    source

   1          #include <at89c5131.h>
   2          #include "serial.h"   // UART communication functions
   3          
   4          // Define the available lab resources
   5          #define NUM_RESOURCES 4
   6          
   7          unsigned char resource_names[NUM_RESOURCES][4] = {"DSO", "AFG", "DMM", "DPS"};
   8          unsigned char max_resources[NUM_RESOURCES] = {5, 5, 8, 6};
   9          unsigned char available_resources[NUM_RESOURCES] = {5, 5, 8, 6}; // Track current availability
  10          
  11          // Function declarations
  12          void display_resources();
  13          void issue_resource();
  14          void return_resource();
  15          
  16          void main(void) {
  17   1          char ch;
  18   1      
  19   1          uart_init(); // Initialize UART
  20   1      
  21   1          // Initial display of resources
  22   1          display_resources();
  23   1      
  24   1          while(1) {
  25   2              transmit_string("Press 'I' for Issue and 'R' for Return\r\n");
  26   2              ch = receive_char(); // Get user input
  27   2      
  28   2              switch(ch) {
  29   3                  case 'I': case 'i':
  30   3                      issue_resource();
  31   3                      break;
  32   3                  case 'R': case 'r':
  33   3                      return_resource();
  34   3                      break;
  35   3                  default:
  36   3                      transmit_string("Invalid Input! Try again.\r\n");
  37   3                      break;
  38   3              }
  39   2          }
  40   1      }
  41          
  42          // Function to display available resources
  43          void display_resources() {
  44   1          unsigned char i;
  45   1          transmit_string("Resources available:\r\n");
  46   1          for(i = 0; i < NUM_RESOURCES; i++) {
  47   2              transmit_string(resource_names[i]);
  48   2              transmit_string("-");
  49   2              transmit_char(available_resources[i] + '0'); // Convert to char
  50   2              transmit_string(" ");
  51   2          }
  52   1          transmit_string("\r\n");
  53   1      }
  54          
C51 COMPILER V9.60.7.0   UART2                                                             03/18/2025 15:44:47 PAGE 2   

  55          // Function to issue a resource
  56          void issue_resource() {
  57   1          char resource_index, quantity;
  58   1          
  59   1          transmit_string("Enter Resource Index (1-4):\r\n");
  60   1          resource_index = receive_char() - '1'; // Convert char to int index
  61   1      
  62   1          if (resource_index < 0 || resource_index >= NUM_RESOURCES) {
  63   2              transmit_string("Invalid resource index!\r\n");
  64   2              return;
  65   2          }
  66   1      
  67   1          transmit_string("Enter Quantity:\r\n");
  68   1          quantity = receive_char() - '0'; // Convert char to int
  69   1      
  70   1          if (available_resources[resource_index] >= quantity) {
  71   2              available_resources[resource_index] -= quantity;
  72   2              transmit_string("Requested resource allocated!\r\n");
  73   2          } else {
  74   2              transmit_string("Requested resource not available...\r\n");
  75   2          }
  76   1      
  77   1          display_resources(); // Update resource availability
  78   1      }
  79          
  80          // Function to return a resource
  81          void return_resource() {
  82   1          char resource_index, quantity;
  83   1      
  84   1          transmit_string("Enter Resource Index (1-4):\r\n");
  85   1          resource_index = receive_char() - '1'; // Convert char to int index
  86   1      
  87   1          if (resource_index < 0 || resource_index >= NUM_RESOURCES) {
  88   2              transmit_string("Invalid resource index!\r\n");
  89   2              return;
  90   2          }
  91   1      
  92   1          transmit_string("Enter Quantity:\r\n");
  93   1          quantity = receive_char() - '0'; // Convert char to int
  94   1      
  95   1          if (available_resources[resource_index] + quantity <= max_resources[resource_index]) {
  96   2              available_resources[resource_index] += quantity;
  97   2              transmit_string("Returned resource received!\r\n");
  98   2          } else {
  99   2              transmit_string("Returned resource out of bounds...\r\n");
 100   2          }
 101   1      
 102   1          display_resources(); // Update resource availability
 103   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    447    ----
   CONSTANT SIZE    =    310    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
